import * as THREE from "three";
import { PointerLockControls } from "three/addons/controls/PointerLockControls.js";
// Set up the scene, camera, and renderer
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(
  75,
  window.innerWidth / window.innerHeight,
  0.1,
  1000
);
camera.rotation.x = THREE.MathUtils.degToRad(-45);
//camera.rotation.y = THREE.MathUtils.degToRad(0);
//camera.rotation.z = THREE.MathUtils.degToRad(-45);
const renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);
// Create the player (ball)
const playerGeometry = new THREE.SphereGeometry(0.5, 64, 64);
const playerMaterial = new THREE.MeshPhongMaterial({
  color: 0x00ff00,
  transparent: true,
  opacity: 0.5,
});
const player = new THREE.Mesh(playerGeometry, playerMaterial);
player.position.y = 0.5;
scene.add(player);
// Create a ground plane
const groundGeometry = new THREE.PlaneGeometry(50, 50);
const groundMaterial = new THREE.MeshPhongMaterial({
  color: 0x888888,
  side: THREE.DoubleSide,
});

const ground = new THREE.Mesh(groundGeometry, groundMaterial);
ground.rotation.x = Math.PI / 2;
scene.add(ground);
// Create a directional light
// const light = new THREE.DirectionalLight(0xff00ff, 0.8);
// light.position.set(0, 1, 1).normalize();
// scene.add(light);
// Add ambient light to the scene
const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
scene.add(ambientLight);

// Set up first-person view (FPV) controls
const controls = new PointerLockControls(camera, document.body);
controls.getObject().position.y = 30;
controls.getObject().position.x = 15;
controls.getObject().position.z = 15;
scene.add(controls.getObject());
document.addEventListener("click", () => controls.lock());
// Handle keyboard input
const moveSpeed = 0.001;
const velocity = new THREE.Vector3();
const direction = new THREE.Vector3();
const keys = {};
document.addEventListener("keydown", (event) => (keys[event.key] = true));
document.addEventListener("keyup", (event) => (keys[event.key] = false));

const updateMovement = () => {
  if (controls.isLocked) {
    velocity.set(0, 0, 0);
    const moveForward = keys["w"] || keys["ArrowUp"];
    const moveBackward = keys["s"] || keys["ArrowDown"];
    const moveLeft = keys["a"] || keys["ArrowLeft"];
    const moveRight = keys["d"] || keys["ArrowRight"];
    const moveUp = keys["r"];
    const moveDown = keys["f"];
    if (moveForward) velocity.z -= moveSpeed;
    if (moveBackward) velocity.z += moveSpeed;
    if (moveLeft) velocity.x -= moveSpeed;
    if (moveRight) velocity.x += moveSpeed;
    if (moveUp) velocity.y += moveSpeed;
    if (moveDown) velocity.y -= moveSpeed;
    controls.getObject().translateX(velocity.x);
    controls.getObject().translateY(velocity.y);
    controls.getObject().translateZ(velocity.z);
    player.position.copy(controls.getObject().position);
    player.position.y += 0.5;
  }
  requestAnimationFrame(updateMovement);
};

// Render loop
const animate = function () {
  requestAnimationFrame(animate);
  updateMovement();
  renderer.render(scene, camera);
};

createRandomObjects(50);
createRandomSpotLights(15);

function createRandomSpotLight() {
  const spotLight = new THREE.SpotLight(
    Math.floor(Math.random() * 16777215), 
    Math.random() * 4, 
    Math.random() * 100 + 50, 
    Math.PI / 6,//Math.floor(Math.random() * 4 + 4), 
    0.5, 
    2);
  spotLight.position.set(Math.random() * 100 - 50,
      Math.random() * 30 + 10,
      Math.random() * 100 - 50);
  scene.add(spotLight);
}

function createRandomSpotLights(numOfLights) {
  for (let i = 0; i < numOfLights; i++) {
    createRandomSpotLight();
  }
}

function generateRandomGeometry(type) {
  let geometry = new THREE.BoxGeometry(
    Math.random() * 2 + 1,
    Math.random() * 2 + 1,
    Math.random() * 2 + 1
  );
  switch (type) {
    case "sphere":
      geometry = new THREE.SphereGeometry(
        Math.random() * 3,
        Math.random() * 64 + 32,
        Math.random() * 64 + 32
      );
      break;
    case "torus":
      geometry = new THREE.TorusGeometry( Math.random() * 5, Math.random() + 0.2, 16, 100);
      break;
    case "cylinder":
      geometry = new THREE.CylinderGeometry(Math.random() * 3, Math.random() * 3, Math.random() * 7 + 1, 16);
      break;
  }
  return geometry;
}

function createRandomObjects(numOfObjects) {
  for (let i = 0; i < numOfObjects; i++) {
    const geoTypes = ["sphere", "box", "torus", "cylinder"];
    const type = geoTypes[Math.floor(Math.random() * geoTypes.length)];
    const geo = generateRandomGeometry(type);
    const metalness = Math.random(); // random metalness value between 0 and 1
    const roughness = Math.random(); // random roughness value between 0 and 1
    const color = Math.floor(Math.random() * 16777215); // generate random hex code
    const material = new THREE.MeshStandardMaterial({
      color: color,
      metalness: metalness,
      roughness: roughness,
    });
    const object = new THREE.Mesh(geo, material);
    object.position.set(
      Math.random() * 50 - 25,
      Math.random() * 10 + 1,
      Math.random() * 50 - 25
    );
    scene.add(object);
  }
}
animate();